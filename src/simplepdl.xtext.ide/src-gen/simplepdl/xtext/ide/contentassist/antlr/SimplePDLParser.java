/*
 * generated by Xtext 2.36.0
 */
package simplepdl.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import simplepdl.xtext.ide.contentassist.antlr.internal.InternalSimplePDLParser;
import simplepdl.xtext.services.SimplePDLGrammarAccess;

public class SimplePDLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SimplePDLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SimplePDLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getProcessElementAccess().getAlternatives(), "rule__ProcessElement__Alternatives");
			builder.put(grammarAccess.getWorkSequenceTypeAccess().getAlternatives(), "rule__WorkSequenceType__Alternatives");
			builder.put(grammarAccess.getProcessAccess().getGroup(), "rule__Process__Group__0");
			builder.put(grammarAccess.getProcessAccess().getGroup_4(), "rule__Process__Group_4__0");
			builder.put(grammarAccess.getGuidanceAccess().getGroup(), "rule__Guidance__Group__0");
			builder.put(grammarAccess.getGuidanceAccess().getGroup_1(), "rule__Guidance__Group_1__0");
			builder.put(grammarAccess.getGuidanceAccess().getGroup_1_2(), "rule__Guidance__Group_1_2__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup(), "rule__WorkDefinition__Group__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_2(), "rule__WorkDefinition__Group_2__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_2_3(), "rule__WorkDefinition__Group_2_3__0");
			builder.put(grammarAccess.getWorkSequenceAccess().getGroup(), "rule__WorkSequence__Group__0");
			builder.put(grammarAccess.getResourceAccess().getGroup(), "rule__Resource__Group__0");
			builder.put(grammarAccess.getACResourceAccess().getGroup(), "rule__ACResource__Group__0");
			builder.put(grammarAccess.getProcessAccess().getNameAssignment_1(), "rule__Process__NameAssignment_1");
			builder.put(grammarAccess.getProcessAccess().getProcessElementsAssignment_3(), "rule__Process__ProcessElementsAssignment_3");
			builder.put(grammarAccess.getProcessAccess().getProcessElementsAssignment_4_1(), "rule__Process__ProcessElementsAssignment_4_1");
			builder.put(grammarAccess.getGuidanceAccess().getElementsAssignment_1_1(), "rule__Guidance__ElementsAssignment_1_1");
			builder.put(grammarAccess.getGuidanceAccess().getElementsAssignment_1_2_1(), "rule__Guidance__ElementsAssignment_1_2_1");
			builder.put(grammarAccess.getGuidanceAccess().getTextAssignment_4(), "rule__Guidance__TextAssignment_4");
			builder.put(grammarAccess.getWorkDefinitionAccess().getNameAssignment_1(), "rule__WorkDefinition__NameAssignment_1");
			builder.put(grammarAccess.getWorkDefinitionAccess().getResourcesAssignment_2_2(), "rule__WorkDefinition__ResourcesAssignment_2_2");
			builder.put(grammarAccess.getWorkDefinitionAccess().getResourcesAssignment_2_3_2(), "rule__WorkDefinition__ResourcesAssignment_2_3_2");
			builder.put(grammarAccess.getWorkSequenceAccess().getLinkTypeAssignment_3(), "rule__WorkSequence__LinkTypeAssignment_3");
			builder.put(grammarAccess.getWorkSequenceAccess().getPredecessorAssignment_5(), "rule__WorkSequence__PredecessorAssignment_5");
			builder.put(grammarAccess.getWorkSequenceAccess().getSuccessorAssignment_7(), "rule__WorkSequence__SuccessorAssignment_7");
			builder.put(grammarAccess.getResourceAccess().getNameAssignment_1(), "rule__Resource__NameAssignment_1");
			builder.put(grammarAccess.getResourceAccess().getQuantityAssignment_3(), "rule__Resource__QuantityAssignment_3");
			builder.put(grammarAccess.getACResourceAccess().getResourceAssignment_0(), "rule__ACResource__ResourceAssignment_0");
			builder.put(grammarAccess.getACResourceAccess().getResourceQuantityAssignment_2(), "rule__ACResource__ResourceQuantityAssignment_2");
			builder.put(grammarAccess.getWorkSequenceTypeAccess().getStartToStartAssignment_0(), "rule__WorkSequenceType__StartToStartAssignment_0");
			builder.put(grammarAccess.getWorkSequenceTypeAccess().getFinishToStartAssignment_1(), "rule__WorkSequenceType__FinishToStartAssignment_1");
			builder.put(grammarAccess.getWorkSequenceTypeAccess().getStartToFinishAssignment_2(), "rule__WorkSequenceType__StartToFinishAssignment_2");
			builder.put(grammarAccess.getWorkSequenceTypeAccess().getFinishToFinishAssignment_3(), "rule__WorkSequenceType__FinishToFinishAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SimplePDLGrammarAccess grammarAccess;

	@Override
	protected InternalSimplePDLParser createParser() {
		InternalSimplePDLParser result = new InternalSimplePDLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SimplePDLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SimplePDLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
