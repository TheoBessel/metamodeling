/*
 * generated by Xtext 2.36.0
 */
package simplepdl.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SimplePDLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "simplepdl.xtext.SimplePDL.Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProcessElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProcessElementsProcessElementParserRuleCall_3_0 = (RuleCall)cProcessElementsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cProcessElementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cProcessElementsProcessElementParserRuleCall_4_1_0 = (RuleCall)cProcessElementsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Process: 'proc' name = ID '{'
		//    processElements += ProcessElement (',' processElements += ProcessElement)*
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		// 'proc' name = ID '{'
		//    processElements += ProcessElement (',' processElements += ProcessElement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'proc'
		public Keyword getProcKeyword_0() { return cProcKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//processElements += ProcessElement
		public Assignment getProcessElementsAssignment_3() { return cProcessElementsAssignment_3; }
		
		//ProcessElement
		public RuleCall getProcessElementsProcessElementParserRuleCall_3_0() { return cProcessElementsProcessElementParserRuleCall_3_0; }
		
		//(',' processElements += ProcessElement)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//processElements += ProcessElement
		public Assignment getProcessElementsAssignment_4_1() { return cProcessElementsAssignment_4_1; }
		
		//ProcessElement
		public RuleCall getProcessElementsProcessElementParserRuleCall_4_1_0() { return cProcessElementsProcessElementParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ProcessElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "simplepdl.xtext.SimplePDL.ProcessElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGuidanceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWorkDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWorkSequenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cResourceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ProcessElement: Guidance | WorkDefinition | WorkSequence | Resource;
		@Override public ParserRule getRule() { return rule; }
		
		//Guidance | WorkDefinition | WorkSequence | Resource
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Guidance
		public RuleCall getGuidanceParserRuleCall_0() { return cGuidanceParserRuleCall_0; }
		
		//WorkDefinition
		public RuleCall getWorkDefinitionParserRuleCall_1() { return cWorkDefinitionParserRuleCall_1; }
		
		//WorkSequence
		public RuleCall getWorkSequenceParserRuleCall_2() { return cWorkSequenceParserRuleCall_2; }
		
		//Resource
		public RuleCall getResourceParserRuleCall_3() { return cResourceParserRuleCall_3; }
	}
	public class GuidanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "simplepdl.xtext.SimplePDL.Guidance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGuidKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cElementsProcessElementCrossReference_1_1_0 = (CrossReference)cElementsAssignment_1_1.eContents().get(0);
		private final RuleCall cElementsProcessElementIDTerminalRuleCall_1_1_0_1 = (RuleCall)cElementsProcessElementCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cElementsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cElementsProcessElementCrossReference_1_2_1_0 = (CrossReference)cElementsAssignment_1_2_1.eContents().get(0);
		private final RuleCall cElementsProcessElementIDTerminalRuleCall_1_2_1_0_1 = (RuleCall)cElementsProcessElementCrossReference_1_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTextKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTextAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTextSTRINGTerminalRuleCall_4_0 = (RuleCall)cTextAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Guidance: 'guid' ('(' elements += [ProcessElement] (',' elements += [ProcessElement])* ')')? '{'
		//    'text' text = STRING
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		// 'guid' ('(' elements += [ProcessElement] (',' elements += [ProcessElement])* ')')? '{'
		//    'text' text = STRING
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'guid'
		public Keyword getGuidKeyword_0() { return cGuidKeyword_0; }
		
		//('(' elements += [ProcessElement] (',' elements += [ProcessElement])* ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//elements += [ProcessElement]
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//[ProcessElement]
		public CrossReference getElementsProcessElementCrossReference_1_1_0() { return cElementsProcessElementCrossReference_1_1_0; }
		
		//ID
		public RuleCall getElementsProcessElementIDTerminalRuleCall_1_1_0_1() { return cElementsProcessElementIDTerminalRuleCall_1_1_0_1; }
		
		//(',' elements += [ProcessElement])*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//elements += [ProcessElement]
		public Assignment getElementsAssignment_1_2_1() { return cElementsAssignment_1_2_1; }
		
		//[ProcessElement]
		public CrossReference getElementsProcessElementCrossReference_1_2_1_0() { return cElementsProcessElementCrossReference_1_2_1_0; }
		
		//ID
		public RuleCall getElementsProcessElementIDTerminalRuleCall_1_2_1_0_1() { return cElementsProcessElementIDTerminalRuleCall_1_2_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'text'
		public Keyword getTextKeyword_3() { return cTextKeyword_3; }
		
		//text = STRING
		public Assignment getTextAssignment_4() { return cTextAssignment_4; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_4_0() { return cTextSTRINGTerminalRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class WorkDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "simplepdl.xtext.SimplePDL.WorkDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cNeedKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cResourcesAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cResourcesACResourceParserRuleCall_2_2_0 = (RuleCall)cResourcesAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Keyword cNeedKeyword_2_3_1 = (Keyword)cGroup_2_3.eContents().get(1);
		private final Assignment cResourcesAssignment_2_3_2 = (Assignment)cGroup_2_3.eContents().get(2);
		private final RuleCall cResourcesACResourceParserRuleCall_2_3_2_0 = (RuleCall)cResourcesAssignment_2_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//WorkDefinition: 'wd' name = ID ('{'
		//    'need' resources += ACResource (',' 'need' resources += ACResource)*
		//'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		// 'wd' name = ID ('{'
		//    'need' resources += ACResource (',' 'need' resources += ACResource)*
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//'wd'
		public Keyword getWdKeyword_0() { return cWdKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		// ('{'
		//    'need' resources += ACResource (',' 'need' resources += ACResource)*
		//'}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//'need'
		public Keyword getNeedKeyword_2_1() { return cNeedKeyword_2_1; }
		
		//resources += ACResource
		public Assignment getResourcesAssignment_2_2() { return cResourcesAssignment_2_2; }
		
		//ACResource
		public RuleCall getResourcesACResourceParserRuleCall_2_2_0() { return cResourcesACResourceParserRuleCall_2_2_0; }
		
		//(',' 'need' resources += ACResource)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//','
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//'need'
		public Keyword getNeedKeyword_2_3_1() { return cNeedKeyword_2_3_1; }
		
		//resources += ACResource
		public Assignment getResourcesAssignment_2_3_2() { return cResourcesAssignment_2_3_2; }
		
		//ACResource
		public RuleCall getResourcesACResourceParserRuleCall_2_3_2_0() { return cResourcesACResourceParserRuleCall_2_3_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
	}
	public class WorkSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "simplepdl.xtext.SimplePDL.WorkSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLinkTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLinkTypeWorkSequenceTypeParserRuleCall_3_0 = (RuleCall)cLinkTypeAssignment_3.eContents().get(0);
		private final Keyword cPredKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPredecessorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cPredecessorWorkDefinitionCrossReference_5_0 = (CrossReference)cPredecessorAssignment_5.eContents().get(0);
		private final RuleCall cPredecessorWorkDefinitionIDTerminalRuleCall_5_0_1 = (RuleCall)cPredecessorWorkDefinitionCrossReference_5_0.eContents().get(1);
		private final Keyword cSucKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSuccessorAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cSuccessorWorkDefinitionCrossReference_7_0 = (CrossReference)cSuccessorAssignment_7.eContents().get(0);
		private final RuleCall cSuccessorWorkDefinitionIDTerminalRuleCall_7_0_1 = (RuleCall)cSuccessorWorkDefinitionCrossReference_7_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//WorkSequence: 'ws' '{'
		//    'type' linkType = WorkSequenceType
		//    'pred' predecessor = [WorkDefinition]
		//    'suc' successor = [WorkDefinition]
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		// 'ws' '{'
		//    'type' linkType = WorkSequenceType
		//    'pred' predecessor = [WorkDefinition]
		//    'suc' successor = [WorkDefinition]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'ws'
		public Keyword getWsKeyword_0() { return cWsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//linkType = WorkSequenceType
		public Assignment getLinkTypeAssignment_3() { return cLinkTypeAssignment_3; }
		
		//WorkSequenceType
		public RuleCall getLinkTypeWorkSequenceTypeParserRuleCall_3_0() { return cLinkTypeWorkSequenceTypeParserRuleCall_3_0; }
		
		//'pred'
		public Keyword getPredKeyword_4() { return cPredKeyword_4; }
		
		//predecessor = [WorkDefinition]
		public Assignment getPredecessorAssignment_5() { return cPredecessorAssignment_5; }
		
		//[WorkDefinition]
		public CrossReference getPredecessorWorkDefinitionCrossReference_5_0() { return cPredecessorWorkDefinitionCrossReference_5_0; }
		
		//ID
		public RuleCall getPredecessorWorkDefinitionIDTerminalRuleCall_5_0_1() { return cPredecessorWorkDefinitionIDTerminalRuleCall_5_0_1; }
		
		//'suc'
		public Keyword getSucKeyword_6() { return cSucKeyword_6; }
		
		//successor = [WorkDefinition]
		public Assignment getSuccessorAssignment_7() { return cSuccessorAssignment_7; }
		
		//[WorkDefinition]
		public CrossReference getSuccessorWorkDefinitionCrossReference_7_0() { return cSuccessorWorkDefinitionCrossReference_7_0; }
		
		//ID
		public RuleCall getSuccessorWorkDefinitionIDTerminalRuleCall_7_0_1() { return cSuccessorWorkDefinitionIDTerminalRuleCall_7_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "simplepdl.xtext.SimplePDL.Resource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQuantityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQuantityINTTerminalRuleCall_3_0 = (RuleCall)cQuantityAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Resource: 'res' name = ID '(' quantity = INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'res' name = ID '(' quantity = INT ')'
		public Group getGroup() { return cGroup; }
		
		//'res'
		public Keyword getResKeyword_0() { return cResKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//quantity = INT
		public Assignment getQuantityAssignment_3() { return cQuantityAssignment_3; }
		
		//INT
		public RuleCall getQuantityINTTerminalRuleCall_3_0() { return cQuantityINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ACResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "simplepdl.xtext.SimplePDL.ACResource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cResourceResourceCrossReference_0_0 = (CrossReference)cResourceAssignment_0.eContents().get(0);
		private final RuleCall cResourceResourceIDTerminalRuleCall_0_0_1 = (RuleCall)cResourceResourceCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cResourceQuantityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cResourceQuantityINTTerminalRuleCall_2_0 = (RuleCall)cResourceQuantityAssignment_2.eContents().get(0);
		
		//ACResource returns ACResource : resource = [Resource] ':' resourceQuantity = INT;
		@Override public ParserRule getRule() { return rule; }
		
		//resource = [Resource] ':' resourceQuantity = INT
		public Group getGroup() { return cGroup; }
		
		//resource = [Resource]
		public Assignment getResourceAssignment_0() { return cResourceAssignment_0; }
		
		//[Resource]
		public CrossReference getResourceResourceCrossReference_0_0() { return cResourceResourceCrossReference_0_0; }
		
		//ID
		public RuleCall getResourceResourceIDTerminalRuleCall_0_0_1() { return cResourceResourceIDTerminalRuleCall_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//resourceQuantity = INT
		public Assignment getResourceQuantityAssignment_2() { return cResourceQuantityAssignment_2; }
		
		//INT
		public RuleCall getResourceQuantityINTTerminalRuleCall_2_0() { return cResourceQuantityINTTerminalRuleCall_2_0; }
	}
	public class WorkSequenceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "simplepdl.xtext.SimplePDL.WorkSequenceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStartToStartAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cStartToStartS2sKeyword_0_0 = (Keyword)cStartToStartAssignment_0.eContents().get(0);
		private final Assignment cFinishToStartAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cFinishToStartF2sKeyword_1_0 = (Keyword)cFinishToStartAssignment_1.eContents().get(0);
		private final Assignment cStartToFinishAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cStartToFinishS2fKeyword_2_0 = (Keyword)cStartToFinishAssignment_2.eContents().get(0);
		private final Assignment cFinishToFinishAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cFinishToFinishF2fKeyword_3_0 = (Keyword)cFinishToFinishAssignment_3.eContents().get(0);
		
		//WorkSequenceType: startToStart = 's2s'
		//    | finishToStart = 'f2s'
		//    | startToFinish = 's2f'
		//    | finishToFinish = 'f2f';
		@Override public ParserRule getRule() { return rule; }
		
		//startToStart = 's2s'
		//   | finishToStart = 'f2s'
		//   | startToFinish = 's2f'
		//   | finishToFinish = 'f2f'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//startToStart = 's2s'
		public Assignment getStartToStartAssignment_0() { return cStartToStartAssignment_0; }
		
		//'s2s'
		public Keyword getStartToStartS2sKeyword_0_0() { return cStartToStartS2sKeyword_0_0; }
		
		//finishToStart = 'f2s'
		public Assignment getFinishToStartAssignment_1() { return cFinishToStartAssignment_1; }
		
		//'f2s'
		public Keyword getFinishToStartF2sKeyword_1_0() { return cFinishToStartF2sKeyword_1_0; }
		
		//startToFinish = 's2f'
		public Assignment getStartToFinishAssignment_2() { return cStartToFinishAssignment_2; }
		
		//'s2f'
		public Keyword getStartToFinishS2fKeyword_2_0() { return cStartToFinishS2fKeyword_2_0; }
		
		//finishToFinish = 'f2f'
		public Assignment getFinishToFinishAssignment_3() { return cFinishToFinishAssignment_3; }
		
		//'f2f'
		public Keyword getFinishToFinishF2fKeyword_3_0() { return cFinishToFinishF2fKeyword_3_0; }
	}
	
	
	private final ProcessElements pProcess;
	private final ProcessElementElements pProcessElement;
	private final GuidanceElements pGuidance;
	private final WorkDefinitionElements pWorkDefinition;
	private final WorkSequenceElements pWorkSequence;
	private final ResourceElements pResource;
	private final ACResourceElements pACResource;
	private final WorkSequenceTypeElements pWorkSequenceType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SimplePDLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProcess = new ProcessElements();
		this.pProcessElement = new ProcessElementElements();
		this.pGuidance = new GuidanceElements();
		this.pWorkDefinition = new WorkDefinitionElements();
		this.pWorkSequence = new WorkSequenceElements();
		this.pResource = new ResourceElements();
		this.pACResource = new ACResourceElements();
		this.pWorkSequenceType = new WorkSequenceTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("simplepdl.xtext.SimplePDL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Process: 'proc' name = ID '{'
	//    processElements += ProcessElement (',' processElements += ProcessElement)*
	//'}';
	public ProcessElements getProcessAccess() {
		return pProcess;
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}
	
	//ProcessElement: Guidance | WorkDefinition | WorkSequence | Resource;
	public ProcessElementElements getProcessElementAccess() {
		return pProcessElement;
	}
	
	public ParserRule getProcessElementRule() {
		return getProcessElementAccess().getRule();
	}
	
	//Guidance: 'guid' ('(' elements += [ProcessElement] (',' elements += [ProcessElement])* ')')? '{'
	//    'text' text = STRING
	//'}';
	public GuidanceElements getGuidanceAccess() {
		return pGuidance;
	}
	
	public ParserRule getGuidanceRule() {
		return getGuidanceAccess().getRule();
	}
	
	//WorkDefinition: 'wd' name = ID ('{'
	//    'need' resources += ACResource (',' 'need' resources += ACResource)*
	//'}')?;
	public WorkDefinitionElements getWorkDefinitionAccess() {
		return pWorkDefinition;
	}
	
	public ParserRule getWorkDefinitionRule() {
		return getWorkDefinitionAccess().getRule();
	}
	
	//WorkSequence: 'ws' '{'
	//    'type' linkType = WorkSequenceType
	//    'pred' predecessor = [WorkDefinition]
	//    'suc' successor = [WorkDefinition]
	//'}';
	public WorkSequenceElements getWorkSequenceAccess() {
		return pWorkSequence;
	}
	
	public ParserRule getWorkSequenceRule() {
		return getWorkSequenceAccess().getRule();
	}
	
	//Resource: 'res' name = ID '(' quantity = INT ')';
	public ResourceElements getResourceAccess() {
		return pResource;
	}
	
	public ParserRule getResourceRule() {
		return getResourceAccess().getRule();
	}
	
	//ACResource returns ACResource : resource = [Resource] ':' resourceQuantity = INT;
	public ACResourceElements getACResourceAccess() {
		return pACResource;
	}
	
	public ParserRule getACResourceRule() {
		return getACResourceAccess().getRule();
	}
	
	//WorkSequenceType: startToStart = 's2s'
	//    | finishToStart = 'f2s'
	//    | startToFinish = 's2f'
	//    | finishToFinish = 'f2f';
	public WorkSequenceTypeElements getWorkSequenceTypeAccess() {
		return pWorkSequenceType;
	}
	
	public ParserRule getWorkSequenceTypeRule() {
		return getWorkSequenceTypeAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
