/*
 * generated by Xtext 2.36.0
 */
package simplepdl.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import simplepdl.xtext.services.SimplePDLGrammarAccess;
import simplepdl.xtext.simplePDL.ACResource;
import simplepdl.xtext.simplePDL.Guidance;
import simplepdl.xtext.simplePDL.Resource;
import simplepdl.xtext.simplePDL.SimplePDLPackage;
import simplepdl.xtext.simplePDL.WorkDefinition;
import simplepdl.xtext.simplePDL.WorkSequence;
import simplepdl.xtext.simplePDL.WorkSequenceType;

@SuppressWarnings("all")
public class SimplePDLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SimplePDLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SimplePDLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SimplePDLPackage.AC_RESOURCE:
				sequence_ACResource(context, (ACResource) semanticObject); 
				return; 
			case SimplePDLPackage.GUIDANCE:
				sequence_Guidance(context, (Guidance) semanticObject); 
				return; 
			case SimplePDLPackage.PROCESS:
				sequence_Process(context, (simplepdl.xtext.simplePDL.Process) semanticObject); 
				return; 
			case SimplePDLPackage.RESOURCE:
				sequence_Resource(context, (Resource) semanticObject); 
				return; 
			case SimplePDLPackage.WORK_DEFINITION:
				sequence_WorkDefinition(context, (WorkDefinition) semanticObject); 
				return; 
			case SimplePDLPackage.WORK_SEQUENCE:
				sequence_WorkSequence(context, (WorkSequence) semanticObject); 
				return; 
			case SimplePDLPackage.WORK_SEQUENCE_TYPE:
				sequence_WorkSequenceType(context, (WorkSequenceType) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     ACResource returns ACResource
	 *
	 * Constraint:
	 *     (resource=[Resource|ID] resourceQuantity=INT)
	 * </pre>
	 */
	protected void sequence_ACResource(ISerializationContext context, ACResource semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimplePDLPackage.Literals.AC_RESOURCE__RESOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplePDLPackage.Literals.AC_RESOURCE__RESOURCE));
			if (transientValues.isValueTransient(semanticObject, SimplePDLPackage.Literals.AC_RESOURCE__RESOURCE_QUANTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplePDLPackage.Literals.AC_RESOURCE__RESOURCE_QUANTITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getACResourceAccess().getResourceResourceIDTerminalRuleCall_0_0_1(), semanticObject.eGet(SimplePDLPackage.Literals.AC_RESOURCE__RESOURCE, false));
		feeder.accept(grammarAccess.getACResourceAccess().getResourceQuantityINTTerminalRuleCall_2_0(), semanticObject.getResourceQuantity());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ProcessElement returns Guidance
	 *     Guidance returns Guidance
	 *
	 * Constraint:
	 *     ((elements+=[ProcessElement|ID] elements+=[ProcessElement|ID]*)? text=STRING)
	 * </pre>
	 */
	protected void sequence_Guidance(ISerializationContext context, Guidance semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Process returns Process
	 *
	 * Constraint:
	 *     (name=ID processElements+=ProcessElement processElements+=ProcessElement*)
	 * </pre>
	 */
	protected void sequence_Process(ISerializationContext context, simplepdl.xtext.simplePDL.Process semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ProcessElement returns Resource
	 *     Resource returns Resource
	 *
	 * Constraint:
	 *     (name=ID quantity=INT)
	 * </pre>
	 */
	protected void sequence_Resource(ISerializationContext context, Resource semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimplePDLPackage.Literals.RESOURCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplePDLPackage.Literals.RESOURCE__NAME));
			if (transientValues.isValueTransient(semanticObject, SimplePDLPackage.Literals.RESOURCE__QUANTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplePDLPackage.Literals.RESOURCE__QUANTITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getResourceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getResourceAccess().getQuantityINTTerminalRuleCall_3_0(), semanticObject.getQuantity());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ProcessElement returns WorkDefinition
	 *     WorkDefinition returns WorkDefinition
	 *
	 * Constraint:
	 *     (name=ID (resources+=ACResource resources+=ACResource*)?)
	 * </pre>
	 */
	protected void sequence_WorkDefinition(ISerializationContext context, WorkDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     WorkSequenceType returns WorkSequenceType
	 *
	 * Constraint:
	 *     (startToStart='s2s' | finishToStart='f2s' | startToFinish='s2f' | finishToFinish='f2f')
	 * </pre>
	 */
	protected void sequence_WorkSequenceType(ISerializationContext context, WorkSequenceType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ProcessElement returns WorkSequence
	 *     WorkSequence returns WorkSequence
	 *
	 * Constraint:
	 *     (linkType=WorkSequenceType predecessor=[WorkDefinition|ID] successor=[WorkDefinition|ID])
	 * </pre>
	 */
	protected void sequence_WorkSequence(ISerializationContext context, WorkSequence semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimplePDLPackage.Literals.WORK_SEQUENCE__LINK_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplePDLPackage.Literals.WORK_SEQUENCE__LINK_TYPE));
			if (transientValues.isValueTransient(semanticObject, SimplePDLPackage.Literals.WORK_SEQUENCE__PREDECESSOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplePDLPackage.Literals.WORK_SEQUENCE__PREDECESSOR));
			if (transientValues.isValueTransient(semanticObject, SimplePDLPackage.Literals.WORK_SEQUENCE__SUCCESSOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimplePDLPackage.Literals.WORK_SEQUENCE__SUCCESSOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWorkSequenceAccess().getLinkTypeWorkSequenceTypeParserRuleCall_3_0(), semanticObject.getLinkType());
		feeder.accept(grammarAccess.getWorkSequenceAccess().getPredecessorWorkDefinitionIDTerminalRuleCall_5_0_1(), semanticObject.eGet(SimplePDLPackage.Literals.WORK_SEQUENCE__PREDECESSOR, false));
		feeder.accept(grammarAccess.getWorkSequenceAccess().getSuccessorWorkDefinitionIDTerminalRuleCall_7_0_1(), semanticObject.eGet(SimplePDLPackage.Literals.WORK_SEQUENCE__SUCCESSOR, false));
		feeder.finish();
	}
	
	
}
